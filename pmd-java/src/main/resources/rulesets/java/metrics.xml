<?xml version="1.0"?>

<ruleset name="Metrics temporary ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/3.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/3.0.0 http://pmd.sourceforge.net/ruleset_3_0_0.xsd">

    <description>
        These are rules which use the Metrics Framework to calculate metrics.
    </description>

    <rule name="CyclomaticComplexity"
          message="The {0} ''{1}'' has a{2} cyclomatic complexity of {3}."
          since="1.03"
          class="net.sourceforge.pmd.lang.java.metrics.rule.CyclomaticComplexityRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#CyclomaticComplexity">
        <description>
            The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic
            in a single method makes its behaviour hard to read and change.

            Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,
            plus one for the method entry. Decision points are places where the control flow jumps to another place in the
            program. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more
            details on the calculation, see the documentation of the [Cyclo metric](/pmd_java_metrics_index.html#cyclomatic-complexity-cyclo).

            Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
            high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.
            Additionnally, classes with many methods of moderate complexity get reported as well once the total of their
            methods' complexities reaches 80, even if none of the methods was directly reported.

            Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down
            into subcomponents.
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
class Foo {
  void baseCyclo() {                // Cyclo = 1
    highCyclo();
  }

  void highCyclo() {                // Cyclo = 10: reported!
    int x = 0, y = 2;
    boolean a = false, b = true;

    if (a && (y == 1 ? b : true)) { // +3
      if (y == x) {                 // +1
        while (true) {              // +1
          if (x++ < 20) {           // +1
            break;                  // +1
          }
        }
      } else if (y == t && !d) {    // +2
        x = a ? y : x;              // +1
      } else {
        x = 2;
      }
    }
  }
}
]]>
        </example>
    </rule>

    <rule name="NcssCount"
          message="The {0} ''{1}'' has a NCSS line count of {2}."
          since="3.9"
          class="net.sourceforge.pmd.lang.java.metrics.rule.NcssCountRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NcssCount">
        <description>
            This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines
            of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual
            statements. For more details on the calculation, see the documentation ofthe[NCSSmetric](/pmd_java_metrics_index.html#non-commenting-source-statements-ncss).
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
import java.util.Collections;       // +0
import java.io.IOException;         // +0

class Foo {                         // +1, total Ncss = 12

  public void bigMethod()           // +1
      throws IOException {
    int x = 0, y = 2;               // +1
    boolean a = false, b = true;    // +1

    if (a || b) {                   // +1
      try {                         // +1
        do {                        // +1
          x += 2;                   // +1
        } while (x < 12);

        System.exit(0);             // +1
      } catch (IOException ioe) {   // +1
        throw new PatheticFailException(ioe); // +1
      }
    } else {
      assert false;                 // +1
    }
  }
}
]]>
        </example>
    </rule>

    <rule name="NPathComplexity"
          since="3.9"
          message="The {0} ''{1}'' has an NPath complexity of {2}"
          class="net.sourceforge.pmd.lang.java.metrics.rule.NPathComplexityRule"
          metrics="true"
          externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NPathComplexity">
        <description>
            The NPath complexity of a method is the number of acyclic execution paths through that method.
            While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of
            full paths from the beginning to the end oftheblock of the method. That metric grows exponentially, as
            it multiplies the complexity of statements inthe same block. For more details on the calculation, see the
            documentation of the [NPath metric](/pmd_java_metrics_index.html#npath-complexity-npath).

            A threshold of 200 is generally considered the point where measures should be taken to reduce
            complexity and increase readability.
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
void bar() {    // This is something more complex than it needs to be,
  if (y) {      // it should be broken down into smaller methods or functions
    for (j = 0; j < m; j++) {
      if (j > r) {
        doSomething();
        while (f < 5 ) {
          anotherThing();
          f -= 27;
          }
        } else {
          tryThis();
        }
      }
    }
    if ( r - n > 45) {
       while (doMagic()) {
          findRabbits();
       }
    }
    try {
      doSomethingDangerous();
    } catch (Exception ex) {
      makeAmends();
    } finally {
      dontDoItAgain();
    }
  }
}

 ]]>
        </example>
    </rule>

</ruleset>
