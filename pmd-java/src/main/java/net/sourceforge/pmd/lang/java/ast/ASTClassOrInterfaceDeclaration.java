/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTClassOrInterfaceDeclaration.java */

package net.sourceforge.pmd.lang.java.ast;

public class ASTClassOrInterfaceDeclaration extends AbstractJavaAccessTypeNode implements QualifiableNode {

    private boolean isInterface;

    public ASTClassOrInterfaceDeclaration(int id) {
        super(id);
    }

    public ASTClassOrInterfaceDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    @Override
    public boolean isFindBoundary() {
        return isNested();
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isNested() {
        return jjtGetParent() instanceof ASTClassOrInterfaceBodyDeclaration
                || jjtGetParent() instanceof ASTAnnotationTypeMemberDeclaration;
    }

    public boolean isInterface() {
        return this.isInterface;
    }

    public void setInterface() {
        this.isInterface = true;
    }

    @Override
    public QualifiedName getQualifiedName() {

        if (isNested()) {
            ASTClassOrInterfaceDeclaration parent = this.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
            QualifiedName parentQN = parent.getQualifiedName();
            return QualifiedName.makeClassOf(parentQN, this.getImage());
        }

        QualifiedName qname = new QualifiedName();
        ASTPackageDeclaration pkg = this.getFirstParentOfType(ASTCompilationUnit.class)
                .getFirstChildOfType(ASTPackageDeclaration.class);

        if (pkg != null) {
            qname.setPackages(pkg.getPackageNameImage().split("\\."));
        }

        qname.setClass(this.getImage());

        return qname;
    }
}
