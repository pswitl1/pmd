/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTType.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * Represents a type reference.
 * 
 * <pre>
 * Type ::= "var" | ReferenceType | PrimitiveType
 * </pre>
 * 
 * Note: it is not exactly the same the "LocalVariableType" defined in JLS.
 */
public class ASTType extends AbstractJavaTypeNode {
    public ASTType(int id) {
        super(id);
    }

    public ASTType(JavaParser p, int id) {
        super(p, id);
    }

    private boolean typeInferred;

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public String getTypeImage() {
        if (isTypeInferred()) {
            return getImage();
        }

        ASTClassOrInterfaceType refType = getFirstDescendantOfType(ASTClassOrInterfaceType.class);
        if (refType != null) {
            return refType.getImage();
        }
        return getFirstDescendantOfType(ASTPrimitiveType.class).getImage();
    }

    public int getArrayDepth() {
        if (jjtGetNumChildren() != 0
                && (jjtGetChild(0) instanceof ASTReferenceType || jjtGetChild(0) instanceof ASTPrimitiveType)) {
            return ((Dimensionable) jjtGetChild(0)).getArrayDepth();
        }
        return 0; // this is not an array
    }

    public boolean isArray() {
        return getArrayDepth() > 0;
    }

    void setTypeInferred(boolean typeInferred) {
        this.typeInferred = typeInferred;
    }

    /**
     * If true, this type represents a type, that has been inferred.
     * It can be e.g. a local variable declaration, which
     * uses the java10 "var" type inference feature.
     * The method {@link #getType()} will return the correct type, if PMD could determine it.
     *
     * @see ASTVariableDeclaratorId#isTypeInferred()
     */
    public boolean isTypeInferred() {
        return typeInferred;
    }
}
