<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">


    <test-code>
        <description>Method Prefix is</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixIs {
    int isotherm() {
        return 1;
    }

    int isValid() { // violation
        return 1;
    }

    boolean isSmall() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix Has</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixHas {
    int haskell() {
        return 1;
    }

    int hasChild() { // violation
        return 1;
    }

    boolean hasHorn() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix Have</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixHave {
    int havelock() {
        return 1;
    }

    int haveChild() { // violation
        return 1;
    }

    boolean haveHorn() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix can</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixCan {
    int cannibal() {
        return 1;
    }

    int canFly() { // violation
        return 1;
    }

    boolean canWalk() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix will</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixWill {
    int william() {
        return 1;
    }

    int willFly() { // violation
        return 1;
    }

    boolean willWalk() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix should</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixShould {
    int shoulder() {
        return 1;
    }

    int shouldFly() { // violation
        return 1;
    }

    boolean shouldWalk() {
        return true;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Setters</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithSetters {
    int settlement() {
        return 1;
    }

    int setName() { // violation
        return 1;
    }

    void setFlag() {
        // do something
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Getters</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithGetters {
    void getaways() {
        // do something
    }

    void getName() { // violation
        // do something
    }

    int getCount() {
        return 1;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Prefix to</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixTo {
    void tokenize() {
        // do something
    }

    void toDataType() { // violation
        // do something
    }

    int toMyInteger() {
        return 1;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Method Contains To</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>2</expected-linenumbers>
        <code><![CDATA[
public class MethodTypeAndNameIsInconsistentWithPrefixTo {
    void grapeToWine() { // violation
        // do something
    }

    int hopsToBeer() {
        return 1;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix is</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixIs {
    int isotherm;
    int isValid; // violation
    boolean isTrue;

    void myMethod() {
        int isothermLocal;
        int isValidLocal; // violation
        boolean isTrueLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix has</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixHas {
    int haskell;
    int hasMoney; // violation
    boolean hasSalary;

    void myMethod() {
        int haskellLocal;
        int hasMoneyLocal; // violation
        boolean hasSalaryLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix can</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixCan {
    int cannibal;
    int canFly; // violation
    boolean canWalk;

    void myMethod() {
        int cannibalLocal;
        int canFlyLocal; // violation
        boolean canWalkLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix will</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixWill {
    int william;
    int willMove; // violation
    boolean willRun;

    void myMethod() {
        int williamLocal;
        int willMoveLocal; // violation
        boolean willRunLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix have</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixHave {
    int havexxx;
    int haveLegs; // violation
    boolean haveHorns;

    void myMethod() {
        int havexxxLocal;
        int haveLegsLocal; // violation
        boolean haveHornsLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field/Variable Prefix should</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixShould {
    int shoulder;
    int shouldClimb; // violation
    boolean shouldEat;

    void myMethod() {
        int shoulderLocal;
        int shouldClimbLocal; // violation
        boolean shouldEatLocal;
    }
}
        ]]></code>
    </test-code>
</test-data>
