<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>Prefix is</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixIs {
    int isotherm;
    int isValid; // violation
    boolean isTrue;

    void myMethod() {
        int isothermLocal;
        int isValidLocal; // violation
        boolean isTrueLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Prefix has</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixHas {
    int haskell;
    int hasMoney; // violation
    boolean hasSalary;

    void myMethod() {
        int haskellLocal;
        int hasMoneyLocal; // violation
        boolean hasSalaryLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Prefix can</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixCan {
    int cannibal;
    int canFly; // violation
    boolean canWalk;

    void myMethod() {
        int cannibalLocal;
        int canFlyLocal; // violation
        boolean canWalkLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Prefix will</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixWill {
    int william;
    int willMove; // violation
    boolean willRun;

    void myMethod() {
        int williamLocal;
        int willMoveLocal; // violation
        boolean willRunLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Prefix have</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixHave {
    int havexxx;
    int haveLegs; // violation
    boolean haveHorns;

    void myMethod() {
        int havexxxLocal;
        int haveLegsLocal; // violation
        boolean haveHornsLocal;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Prefix should</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,8</expected-linenumbers>
        <code><![CDATA[
public class AttributeTypeAndNameIsInconsistentWithPrefixShould {
    int shoulder;
    int shouldClimb; // violation
    boolean shouldEat;

    void myMethod() {
        int shoulderLocal;
        int shouldClimbLocal; // violation
        boolean shouldEatLocal;
    }
}
        ]]></code>
    </test-code>
</test-data>
