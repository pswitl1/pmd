<?xml version="1.0" encoding="UTF-8"?>
<test-data>

    <code-fragment id="full-example"><![CDATA[
public class Foo {
  public static void bar() {
    boolean a, b = true;
    try { // total 6
      if (true) { // 2
        List buz = new ArrayList();
      }

      for(int i = 0; i < 19; i++) { // 2
        List buz = new ArrayList();
      }
    } catch(Exception e) {
      if (true) { // 2
        e.printStackTrace();
      }
    }

    int j = 0;
    if (true || a && b) { // 4
      j = 10;
      return;
    }

    while (j++ < 20) { // 2
      List buz = new ArrayList();
    }

    switch(j) { // 7
      case 1:
      case 2: break;
      case 3: j = 5; break;
      case 4: if (b && a) { bar(); } break;
      default: break;
    }

    do { // 3
        List buz = new ArrayList();
    } while (a && j++ < 30);

    if (b) { // 2
      return;
    }
  }
}
     ]]></code-fragment>


    <test-code>
        <description>Full example</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 2016.</message>
        </expected-messages>
        <code-ref id="full-example"/>
    </test-code>

    <test-code>
        <description>If with no else</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 2.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a;
            if (a) {
              bar();
            }
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Nested if with no else</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 3.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            if (a) {
              if (b) {
                bar();
              } else {
                a = true;
              }
            }
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Nested if with else</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 4.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            if (a) {
              if (b) {
                bar();
              } else {
                a = true;
              }
            } else {
              if (b) {
                b = false;
              } else {
                a = true;
              }
            }
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Two ifs</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 4.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            if (a) {}
            else {}

            if (b) {}
            else {}
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Two ifs one else</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 4.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            if (a) {}
            else {}

            if (b) {}
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Two ifs and nested</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 6.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            if (a) {
              if (b) {}
            } else {}

            if (b) {}
            else {}
          }
        }
        ]]></code>
    </test-code>


    <test-code>
        <description>Full switch</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 7.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            int j = 23;
            switch(j) {
              case 1:
              case 2: break;
              case 3: j = 5; break;
              case 4: if (b && a) { bar(); } break;
              default: break;
            }
          }
        }
        ]]></code>
    </test-code>

    <test-code>
        <description>Ensure switch has same complexity as equivalent ifs</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 7.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            boolean a, b;
            int j = 23;
            if (j == 1 || j == 2) {
            } else if (j == 3) {
              j = 5;
            } else if (j == 4) {
              if (b && a) { bar(); }
            }
          }
        }
        ]]></code>
    </test-code>


    <test-code>
        <description>Boolean operators</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#bar()' has value 4.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          void bar() {
            if (a && b || c);
          }
        }
        ]]></code>
    </test-code>


    <code-fragment id="bug3484404"><![CDATA[
class Bar {
  public void x(boolean x, boolean y) {
    z((x ? 1 : 2), (y ? 3 : 4));
  }

  public int y(boolean x, boolean y) {
    return z((x ? 1 : 2), (y ? 3 : 4));
  }

  public int z(int x, int y) {
    return x + y;
  }
}
    ]]></code-fragment>

    <test-code>
        <description>test case for bug 3484404 (Invalid NPath calculation in return statement)</description>
        <expected-problems>3</expected-problems>
        <expected-messages>
            <message>'.Bar#x(boolean, boolean)' has value 25.</message>
            <message>'.Bar#y(boolean, boolean)' has value 25.</message>
            <message>'.Bar#z(int, int)' has value 1.</message>
        </expected-messages>
        <code-ref id="bug3484404"/>
    </test-code>


    <test-code>
        <description>NPath supports constructors</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>'.Foo#Foo()' has value 7.</message>
        </expected-messages>
        <code><![CDATA[
        class Foo {
          Foo() {
            boolean a, b;
            int j = 23;
            switch(j) {
              case 1:
              case 2: break;
              case 3: j = 5; break;
              case 4: if (b && a) { bar(); } break;
              default: break;
            }
          }
        }
        ]]></code>
    </test-code>

</test-data>
