<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Missing override on method from interface</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            public class RunnableImpl implements Runnable {
                public void run() { }
            }

            ]]></code>
    </test-code>
    <test-code>
        <description>Override present on method from interface</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class RunnableImpl implements Runnable{
                @Override
                public void run() { }
            }

            ]]></code>
    </test-code>

    <test-code>
        <description>Override absent in method from superclass</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class ConcreteClass extends AbstractClass {
                Object fun(String s) {
                    return null;
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>Override present in method from superclass</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class ConcreteClass extends AbstractClass {
                @Override
                Object fun(String s) {
                    return null;
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>Override present in method from interface transitively</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class ConcreteClassTransitive extends AbsClassWithInterface {
                @Override
                public void run() {
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>Override absent in method from interface transitively</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class ConcreteClassTransitive extends AbsClassWithInterface {
                public void run() {
                }
            }
        ]]></code>
    </test-code>


    <test-code>
        <description>Consider anonymous classes</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>The method 'run()' is missing an @Override annotation.</message>
        </expected-messages>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class AnonClassExample {
                static {
                    new Thread(new Runnable() {
                        // missing
                        public void run() {

                        }
                    }).start();
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>Consider anonymous classes</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;
            public class AnonClassExample {
                static {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            bar();
                        }

                        public void bar() {

                        }
                    }).start();
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>Consider enum methods</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration;
            import net.sourceforge.pmd.lang.metrics.Metric;
            import net.sourceforge.pmd.lang.metrics.MetricKey;

            public enum EnumWithInterfaces implements MetricKey<ASTAnyTypeDeclaration> {
                Foo {
                    @Override
                    public Metric<ASTAnyTypeDeclaration> getCalculator() {
                        return null;
                    }
                };

                @Override
                public Metric<ASTAnyTypeDeclaration> getCalculator() {
                    return null;
                }


                @Override
                public boolean supports(ASTAnyTypeDeclaration node) {
                    return false;
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>Consider enum methods</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>9,15</expected-linenumbers>
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration;
            import net.sourceforge.pmd.lang.metrics.Metric;
            import net.sourceforge.pmd.lang.metrics.MetricKey;

            public enum EnumWithInterfaces implements MetricKey<ASTAnyTypeDeclaration> {
                Foo {
                    public Metric<ASTAnyTypeDeclaration> getCalculator() {
                        return null;
                    }
                };


                public Metric<ASTAnyTypeDeclaration> getCalculator() {
                    return null;
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>Consider methods with array parameters</description>
        <expected-problems>0</expected-problems> <!-- FIXME should be 1 - caused by #910 -->
        <!--<expected-messages>-->
            <!--<message>The method 'arrayParams(String, int[], StringBuilder[])' is missing an @Override annotation.</message>-->
        <!--</expected-messages>-->
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            import org.objectweb.asm.Label;

            public class ConcreteClassArrayParams extends AbstractClass {

                // missing
                public void arrayParams(String dflt, int[] keys, StringBuilder[] labels) {
                    super.arrayParams(dflt, keys, labels);
                }
            }
        ]]></code>
    </test-code>

    <test-code>
        <description>Consider enum anon class</description>
        <expected-problems>0</expected-problems> <!-- FIXME should be 1 - bug in typeres, anon constants are not resolved -->
        <!--<expected-linenumbers>10</expected-linenumbers>-->
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration;
            import net.sourceforge.pmd.lang.metrics.Metric;
            import net.sourceforge.pmd.lang.metrics.MetricKey;

            public enum EnumWithAnonClass {
                Foo {
                    // missing
                    public String getSomething() {
                        return null;
                    }
                };


                public Object getSomething() {
                    return null;
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>Consider method inherited from generic supertype</description>
        <expected-problems>0</expected-problems> <!-- FIXME should be 1 - very hard-->
        <!--<expected-linenumbers>11</expected-linenumbers>-->
        <code><![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration;
            import net.sourceforge.pmd.lang.metrics.Metric;
            import net.sourceforge.pmd.lang.metrics.MetricKey;

            public enum EnumWithInterfaces implements MetricKey<ASTAnyTypeDeclaration> {
                Foo;

                // missing
                public boolean supports(ASTAnyTypeDeclaration node) {
                    return false;
                }
            }
            ]]></code>
    </test-code>


    <test-code>
        <description>Consider generic method</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code>
            <![CDATA[
            package net.sourceforge.pmd.lang.java.rule.bestpractices.missingoverride;

            public class SubclassWithGenericMethod extends AbstractClass {

                // missing
                public <P, Q> Q generic(P t, Q r) { // generic param names are different from superclass
                    return super.generic(t, r);
                }
            }
            ]]>
        </code>
    </test-code>

</test-data>